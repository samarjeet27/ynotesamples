// BuildAutocomplete.ys
using FastColoredTextBoxNS;
using SS.Ynote.Classic.UI;
using System.Collections.Generic;

// Main Mehtod
static void Main(IYnote ynote)
{
    var edit = ynote.Panel.ActiveDocument as Editor;
    if(edit.AutoCompleteMenu == null)
        return;
    edit.AutoCompleteMenu.Items.SetAutocompleteItems(BuildAutoCompleteMenuList());
}
static string[] keywords = { "abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked", "class", "const", "continue", "decimal", "default", "delegate", "do", "double", "else", "enum", "event", "explicit", "extern", "false", "finally", "fixed", "float", "for", "foreach", "goto", "if", "implicit", "in", "int", "interface", "internal", "is", "lock", "long", "namespace", "new", "null", "object", "operator", "out", "override", "params", "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed", "short", "sizeof", "stackalloc", "static", "string", "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort", "using", "virtual", "void", "volatile", "while", "add", "alias", "ascending", "descending", "dynamic", "from", "get", "global", "group", "into", "join", "let", "orderby", "partial", "remove", "select", "set", "value", "var", "where", "yield" };
static string[] methods = { "Equals()", "GetHashCode()", "GetType()", "ToString()" };
static string[] snippets = { "if(^)\n{\n;\n}", "if(^)\n{\n;\n}\nelse\n{\n;\n}", "for(^;;)\n{\n;\n}", "while(^)\n{\n;\n}", "do\n{\n^;\n}while();", "switch(^)\n{\ncase : break;\n}" };
static string[] declarationSnippets = { 
    "public class ^\n{\n}", "private class ^\n{\n}", "internal class ^\n{\n}",
    "public struct ^\n{\n;\n}", "private struct ^\n{\n;\n}", "internal struct ^\n{\n;\n}",
    "public void ^()\n{\n;\n}", "private void ^()\n{\n;\n}", "internal void ^()\n{\n;\n}", "protected void ^()\n{\n;\n}",
    "public ^{ get; set; }", "private ^{ get; set; }", "internal ^{ get; set; }", "protected ^{ get; set; }"
    };
    static readonly string[] dotSnippets = new string[]{
        "System",
        "System.IO",
        "System.Windows",
        "System.Windows.Forms",
        "File",
        "File.WriteAllText",
        "File.WriteAllLines",
        "File.WriteAllBytes",
        "File.ReadAllText",
        "File.ReadAllLines",
        "File.ReadAllBytes",
        "Console",
        "Console.ReadLine",
        "Console.Read",
        "Console.ReadKey",
        "Console.Write",
        "Console.WriteLine",
        "Console.Title",
        "System.ComponentModel",
        "System.Linq",
        "System.Xml",
        "SS",
        "SS.Ynote",
        "SS.Ynote.Classic.UI",
        "SS.Ynote.Classic",
        "ynote.Panel",
        "ynote.Panel.ActiveDocument",
        "ynote.Menu",
        "ynote.OpenFile",
        "ynote.SaveEditor",
        };
        static IEnumerable<AutocompleteItem> BuildAutoCompleteMenuList()
        {
            var items = new List<AutocompleteItem>();
            
            foreach (var item in snippets)
                items.Add(new SnippetAutocompleteItem(item));
            foreach (var item in declarationSnippets)
                items.Add(new SnippetAutocompleteItem(item));
            foreach (var item in methods)
                items.Add(new MethodAutocompleteItem(item));
            foreach (var item in keywords)
                items.Add(new AutocompleteItem(item));
            foreach (var item in dotSnippets)
                items.Add(new LibraryAutocompleteItem(item));
            return items;
        }
        /// <summary>
        /// This autocomplete item appears after dot [ library reference ]
        /// from FastColoredTextBoxNS.Tester.AutocompleteSample4
        /// </summary>
        public class LibraryAutocompleteItem : MethodAutocompleteItem
        {
            string firstPart;
            string lastPart;
            
            public LibraryAutocompleteItem(string text)
            : base(text)
            {
                var i = text.LastIndexOf('.');
                if (i < 0)
                firstPart = text;
                else
                {
                    firstPart = text.Substring(0, i);
                    lastPart = text.Substring(i + 1);
                }
            }
            
            public override CompareResult Compare(string fragmentText)
            {
                int i = fragmentText.LastIndexOf('.');
                
                if (i < 0)
                {
                    if (firstPart.StartsWith(fragmentText) && string.IsNullOrEmpty(lastPart))
                    return CompareResult.VisibleAndSelected;
                    //if (firstPart.ToLower().Contains(fragmentText.ToLower()))
                    //  return CompareResult.Visible;
                }
                else
                {
                    var fragmentFirstPart = fragmentText.Substring(0, i);
                    var fragmentLastPart = fragmentText.Substring(i + 1);
                    
                    
                    if (firstPart != fragmentFirstPart)
                    return CompareResult.Hidden;
                    
                    if (lastPart != null && lastPart.StartsWith(fragmentLastPart))
                    return CompareResult.VisibleAndSelected;
                    
                    if (lastPart != null && lastPart.ToLower().Contains(fragmentLastPart.ToLower()))
                    return CompareResult.Visible;
                    
                }
                
                return CompareResult.Hidden;
            }
            
            public override string GetTextForReplace()
            {
                if (lastPart == null)
                return firstPart;
                
                return firstPart + "." + lastPart;
            }
            
            public override string ToString()
            {
                if (lastPart == null)
                return firstPart;
                
                return lastPart;
            }
        }