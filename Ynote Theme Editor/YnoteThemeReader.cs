using System;
using System.Collections.Generic;
using System.Drawing;
using System.Xml;

public class YnoteThemeReader
{
    public IDictionary<string, ThemeKeyValue> KeyAssociation;

    public YnoteThemeReader()
    {
        KeyAssociation = new Dictionary<string, ThemeKeyValue>();
    }

    public void Read(string theme)
    {
        using (XmlReader reader = XmlReader.Create(theme))
        {
            while (reader.Read())
                // Only detect start elements.
                if (reader.IsStartElement())
                {
                    // Get element name and switch on it.
                    switch (reader.Name)
                    {
                        case "Style":
                            // Search for the attribute name on this current node.
                            string name = reader["Name"];
                            var fontstyle = ToEnum<FontStyle>(reader["Font"]);
                            string color = reader["Color"];
                            KeyAssociation.Add(name, new ThemeKeyValue(color, fontstyle, KeyType.Style));
                            if (reader.Read())
                                try
                                {
                                    KeyAssociation.Add(name, new ThemeKeyValue(color, fontstyle, KeyType.Style));
                                }
                                catch (Exception)
                                {
                                    // move();
                                }
                            break;
                        case "Key":
                            // Search for the attribute name on this current node.
                            string keyname = reader["Name"];
                            string keyvalue = reader["Value"];
                            KeyAssociation.Add(keyname, new ThemeKeyValue(keyvalue, KeyType.Key));
                            if (reader.Read())
                                try
                                {
                                    KeyAssociation.Add(keyname, new ThemeKeyValue(keyvalue, KeyType.Key));
                                }
                                catch (Exception)
                                {
                                    // move();
                                }
                            break;
                    }
                }
        }
    }

    public void Save(string outfile)
    {
        var xmlWriterSettings = new XmlWriterSettings {NewLineOnAttributes = true, Indent = true};
        using (XmlWriter writer = XmlWriter.Create(outfile, xmlWriterSettings))
        {
            writer.WriteStartDocument();
            writer.WriteStartElement("YnoteTheme");
            writer.WriteComment("Generated by Ynote Theme Editor");
            foreach (var key in KeyAssociation)
            {
                switch (key.Value.KeyType)
                {
                    case KeyType.Style:
                        writer.WriteStartElement("Style");
                        writer.WriteAttributeString("Name", key.Key);
                        writer.WriteAttributeString("Color", key.Value.Hex);
                        writer.WriteAttributeString("Font", key.Value.FontStyle.ToString());
                        writer.WriteEndElement();
                        break;
                    case KeyType.Key:
                        writer.WriteStartElement("Key");
                        writer.WriteAttributeString("Name", key.Key);
                        writer.WriteAttributeString("Value", key.Value.Hex);
                        writer.WriteEndElement();
                        break;
                }
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            var doc = new XmlDocument();
            doc.Save(writer);
        }
    }

    public static T ToEnum<T>(string str)
    {
        return ((T) Enum.Parse(typeof (T), str));
    }
}

public class ThemeKeyValue
{
    public KeyType KeyType;

    /// <summary>
    ///     Default Constructor
    /// </summary>
    /// <param name="hex"></param>
    public ThemeKeyValue(string hex)
    {
        Hex = hex;
    }

    /// <summary>
    ///     Theme Key Value
    /// </summary>
    /// <param name="hex"></param>
    /// <param name="FontStyle"></param>
    public ThemeKeyValue(string hex, FontStyle Style)
    {
        Hex = hex;
        FontStyle = Style;
    }

    public ThemeKeyValue(string hex, KeyType Type)
    {
        Hex = hex;
        KeyType = Type;
    }

    public ThemeKeyValue(string hex, FontStyle Style, KeyType Type)
    {
        Hex = hex;
        FontStyle = Style;
        KeyType = Type;
    }

    /// <summary>
    ///     Hex
    /// </summary>
    public string Hex { get; set; }

    /// <summary>
    ///     FontStyle
    /// </summary>
    public FontStyle FontStyle { get; set; }
}

public enum KeyType
{
    Style,
    Key
}